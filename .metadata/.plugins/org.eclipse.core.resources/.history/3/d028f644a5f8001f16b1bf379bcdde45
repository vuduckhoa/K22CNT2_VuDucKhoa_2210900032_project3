package com.springmvc.controllers;

import com.springmvc.beans.Vdk_quantri;
import com.springmvc.dao.VDK_quantridao;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;

import javax.servlet.http.HttpSession;
import java.util.List;

@Controller
@RequestMapping("/admin")
public class VdkQuantriController {

    @Autowired
    private VDK_quantridao quantriDao;

    @Autowired
    private BCryptPasswordEncoder passwordEncoder; // Bổ sung mã hóa mật khẩu

    @GetMapping("/list")
    public String listAdmins(Model model, HttpSession session) {
        if (session.getAttribute("admin") == null) {
            return "redirect:/admin/login";
        }
        List<Vdk_quantri> admins = quantriDao.getEmployees();
        model.addAttribute("admins", admins);
        return "admin/list";
    }

    @GetMapping("/add")
    public String showAddForm(Model model, HttpSession session) {
        if (session.getAttribute("admin") == null) {
            return "redirect:/admin/login";
        }
        model.addAttribute("admin", new Vdk_quantri());
        return "admin/add";
    }

    @PostMapping("/add")
    public String addAdmin(@ModelAttribute("admin") Vdk_quantri admin, HttpSession session) {
        if (session.getAttribute("admin") == null) {
            return "redirect:/admin/login";
        }
        // Mã hóa mật khẩu trước khi lưu
        admin.setVdk_MatKhau(passwordEncoder.encode(admin.getVdk_MatKhau()));
        quantriDao.save(admin);
        return "redirect:/admin/list";
    }

    @GetMapping("/edit/{id}")
    public String showEditForm(@PathVariable int id, Model model, HttpSession session) {
        if (session.getAttribute("admin") == null) {
            return "redirect:/admin/login";
        }
        Vdk_quantri admin = quantriDao.getEmpById(id);
        model.addAttribute("admin", admin);
        return "admin/edit";
    }

    @PostMapping("/edit")
    public String updateAdmin(@ModelAttribute("admin") Vdk_quantri admin, HttpSession session) {
        if (session.getAttribute("admin") == null) {
            return "redirect:/admin/login";
        }
        // Kiểm tra xem mật khẩu có thay đổi không
        Vdk_quantri existingAdmin = quantriDao.getEmpById(admin.getId());
        if (!admin.getVdk_MatKhau().equals(existingAdmin.getVdk_MatKhau())) {
            admin.setVdk_MatKhau(passwordEncoder.encode(admin.getVdk_MatKhau())); // Mã hóa nếu mật khẩu thay đổi
        }
        quantriDao.update(admin);
        return "redirect:/admin/list";
    }

    @GetMapping("/delete/{id}")
    public String deleteAdmin(@PathVariable int id, HttpSession session) {
        if (session.getAttribute("admin") == null) {
            return "redirect:/admin/login";
        }
        quantriDao.delete(id);
        return "redirect:/admin/list";
    }

    @GetMapping("/login")
    public String showLoginForm() {
        return "admin/login";
    }

    @PostMapping("/login")
    public String login(@RequestParam("vdk_TaiKhoan") String username,
                        @RequestParam("vdk_MatKhau") String password,
                        Model model, HttpSession session) {
        Vdk_quantri admin = quantriDao.getAdminByUsername(username); // Chỉ tìm bằng username
        if (admin != null && passwordEncoder.matches(password, admin.getVdk_MatKhau())) {
            session.setAttribute("admin", admin);
            return "redirect:/admin/list";
        } else {
            model.addAttribute("error", "Sai tài khoản hoặc mật khẩu!");
            return "admin/login";
        }
    }

    @GetMapping("/logout")
    public String logout(HttpSession session) {
        session.invalidate();
        return "redirect:/admin/login";
    }
}
